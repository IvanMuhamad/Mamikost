// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: orderRentProperty.sql

package db

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO order_rent_properties (orpo_purchase_no, orpo_tax, orpo_subtotal, orpo_patrx_no, orpo_user_id) 
VALUES ($1, $2, $3, $4, $5)
RETURNING orpo_id, orpo_purchase_no, orpo_tax, orpo_subtotal, orpo_patrx_no, orpo_modified, orpo_user_id
`

type CreateOrderParams struct {
	OrpoPurchaseNo string   `json:"orpo_purchase_no"`
	OrpoTax        *float64 `json:"orpo_tax"`
	OrpoSubtotal   *float64 `json:"orpo_subtotal"`
	OrpoPatrxNo    *string  `json:"orpo_patrx_no"`
	OrpoUserID     *int32   `json:"orpo_user_id"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (*OrderRentProperty, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.OrpoPurchaseNo,
		arg.OrpoTax,
		arg.OrpoSubtotal,
		arg.OrpoPatrxNo,
		arg.OrpoUserID,
	)
	var i OrderRentProperty
	err := row.Scan(
		&i.OrpoID,
		&i.OrpoPurchaseNo,
		&i.OrpoTax,
		&i.OrpoSubtotal,
		&i.OrpoPatrxNo,
		&i.OrpoModified,
		&i.OrpoUserID,
	)
	return &i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM order_rent_properties 
WHERE orpo_id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, orpoID int32) error {
	_, err := q.db.Exec(ctx, deleteOrder, orpoID)
	return err
}

const findAllOrders = `-- name: FindAllOrders :many
SELECT orpo_id, orpo_purchase_no, orpo_tax, orpo_subtotal, orpo_patrx_no, orpo_modified, orpo_user_id 
FROM order_rent_properties
`

func (q *Queries) FindAllOrders(ctx context.Context) ([]*OrderRentProperty, error) {
	rows, err := q.db.Query(ctx, findAllOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*OrderRentProperty
	for rows.Next() {
		var i OrderRentProperty
		if err := rows.Scan(
			&i.OrpoID,
			&i.OrpoPurchaseNo,
			&i.OrpoTax,
			&i.OrpoSubtotal,
			&i.OrpoPatrxNo,
			&i.OrpoModified,
			&i.OrpoUserID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findOrderByID = `-- name: FindOrderByID :one
SELECT orpo_id, orpo_purchase_no, orpo_tax, orpo_subtotal, orpo_patrx_no, orpo_modified, orpo_user_id 
FROM order_rent_properties 
WHERE orpo_id = $1
`

func (q *Queries) FindOrderByID(ctx context.Context, orpoID int32) (*OrderRentProperty, error) {
	row := q.db.QueryRow(ctx, findOrderByID, orpoID)
	var i OrderRentProperty
	err := row.Scan(
		&i.OrpoID,
		&i.OrpoPurchaseNo,
		&i.OrpoTax,
		&i.OrpoSubtotal,
		&i.OrpoPatrxNo,
		&i.OrpoModified,
		&i.OrpoUserID,
	)
	return &i, err
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE order_rent_properties 
SET orpo_purchase_no = $1, 
    orpo_tax = $2, 
    orpo_subtotal = $3, 
    orpo_patrx_no = $4 
WHERE orpo_id = $5
RETURNING orpo_id, orpo_purchase_no, orpo_tax, orpo_subtotal, orpo_patrx_no, orpo_modified, orpo_user_id
`

type UpdateOrderParams struct {
	OrpoPurchaseNo string   `json:"orpo_purchase_no"`
	OrpoTax        *float64 `json:"orpo_tax"`
	OrpoSubtotal   *float64 `json:"orpo_subtotal"`
	OrpoPatrxNo    *string  `json:"orpo_patrx_no"`
	OrpoID         int32    `json:"orpo_id"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (*OrderRentProperty, error) {
	row := q.db.QueryRow(ctx, updateOrder,
		arg.OrpoPurchaseNo,
		arg.OrpoTax,
		arg.OrpoSubtotal,
		arg.OrpoPatrxNo,
		arg.OrpoID,
	)
	var i OrderRentProperty
	err := row.Scan(
		&i.OrpoID,
		&i.OrpoPurchaseNo,
		&i.OrpoTax,
		&i.OrpoSubtotal,
		&i.OrpoPatrxNo,
		&i.OrpoModified,
		&i.OrpoUserID,
	)
	return &i, err
}

const updateOrderPatrxNo = `-- name: UpdateOrderPatrxNo :one
UPDATE order_rent_properties 
SET orpo_patrx_no = $1 
WHERE orpo_id = $2
RETURNING orpo_id, orpo_purchase_no, orpo_tax, orpo_subtotal, orpo_patrx_no, orpo_modified, orpo_user_id
`

type UpdateOrderPatrxNoParams struct {
	OrpoPatrxNo *string `json:"orpo_patrx_no"`
	OrpoID      int32   `json:"orpo_id"`
}

func (q *Queries) UpdateOrderPatrxNo(ctx context.Context, arg UpdateOrderPatrxNoParams) (*OrderRentProperty, error) {
	row := q.db.QueryRow(ctx, updateOrderPatrxNo, arg.OrpoPatrxNo, arg.OrpoID)
	var i OrderRentProperty
	err := row.Scan(
		&i.OrpoID,
		&i.OrpoPurchaseNo,
		&i.OrpoTax,
		&i.OrpoSubtotal,
		&i.OrpoPatrxNo,
		&i.OrpoModified,
		&i.OrpoUserID,
	)
	return &i, err
}
