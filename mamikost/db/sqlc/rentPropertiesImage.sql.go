// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: rentPropertiesImage.sql

package db

import (
	"context"
)

const deleteAllImagesForProperty = `-- name: DeleteAllImagesForProperty :exec
DELETE FROM rent_properties_images 
WHERE frim_repo_id = $1
`

func (q *Queries) DeleteAllImagesForProperty(ctx context.Context, frimRepoID *int32) error {
	_, err := q.db.Exec(ctx, deleteAllImagesForProperty, frimRepoID)
	return err
}

const deleteImageByID = `-- name: DeleteImageByID :exec
DELETE FROM rent_properties_images 
WHERE frim_id = $1
`

func (q *Queries) DeleteImageByID(ctx context.Context, frimID int32) error {
	_, err := q.db.Exec(ctx, deleteImageByID, frimID)
	return err
}

const getAllImages = `-- name: GetAllImages :many
SELECT frim_id, frim_filename, frim_default, frim_repo_id 
FROM rent_properties_images
`

func (q *Queries) GetAllImages(ctx context.Context) ([]*RentPropertiesImage, error) {
	rows, err := q.db.Query(ctx, getAllImages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*RentPropertiesImage
	for rows.Next() {
		var i RentPropertiesImage
		if err := rows.Scan(
			&i.FrimID,
			&i.FrimFilename,
			&i.FrimDefault,
			&i.FrimRepoID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getImageByID = `-- name: GetImageByID :one
SELECT frim_id, frim_filename, frim_default, frim_repo_id 
FROM rent_properties_images 
WHERE frim_id = $1
`

func (q *Queries) GetImageByID(ctx context.Context, frimID int32) (*RentPropertiesImage, error) {
	row := q.db.QueryRow(ctx, getImageByID, frimID)
	var i RentPropertiesImage
	err := row.Scan(
		&i.FrimID,
		&i.FrimFilename,
		&i.FrimDefault,
		&i.FrimRepoID,
	)
	return &i, err
}

const uploadImage = `-- name: UploadImage :one
INSERT INTO rent_properties_images (frim_filename, frim_default, frim_repo_id) 
VALUES ($1, $2, $3) 
RETURNING frim_id
`

type UploadImageParams struct {
	FrimFilename string  `json:"frim_filename"`
	FrimDefault  *string `json:"frim_default"`
	FrimRepoID   *int32  `json:"frim_repo_id"`
}

func (q *Queries) UploadImage(ctx context.Context, arg UploadImageParams) (int32, error) {
	row := q.db.QueryRow(ctx, uploadImage, arg.FrimFilename, arg.FrimDefault, arg.FrimRepoID)
	var frim_id int32
	err := row.Scan(&frim_id)
	return frim_id, err
}
