// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: orderRentPropertyDetail.sql

package db

import (
	"context"
)

const addItemOrder = `-- name: AddItemOrder :one
INSERT INTO order_rent_properties_detail (orpd_qty_unit, orpd_price, orpd_orpo_id, orpd_repo_id)
VALUES ($1, $2, $3, $4)
RETURNING orpd_id, orpd_qty_unit, orpd_price, orpd_total_price, orpd_orpo_id, orpd_repo_id
`

type AddItemOrderParams struct {
	OrpdQtyUnit int32   `json:"orpd_qty_unit"`
	OrpdPrice   float64 `json:"orpd_price"`
	OrpdOrpoID  *int32  `json:"orpd_orpo_id"`
	OrpdRepoID  *int32  `json:"orpd_repo_id"`
}

func (q *Queries) AddItemOrder(ctx context.Context, arg AddItemOrderParams) (*OrderRentPropertiesDetail, error) {
	row := q.db.QueryRow(ctx, addItemOrder,
		arg.OrpdQtyUnit,
		arg.OrpdPrice,
		arg.OrpdOrpoID,
		arg.OrpdRepoID,
	)
	var i OrderRentPropertiesDetail
	err := row.Scan(
		&i.OrpdID,
		&i.OrpdQtyUnit,
		&i.OrpdPrice,
		&i.OrpdTotalPrice,
		&i.OrpdOrpoID,
		&i.OrpdRepoID,
	)
	return &i, err
}

const addOrderDetail = `-- name: AddOrderDetail :one
INSERT INTO order_rent_properties_detail (orpd_qty_unit, orpd_price, orpd_total_price, orpd_orpo_id, orpd_repo_id) 
VALUES ($1, $2, $3, $4, $5)
RETURNING orpd_id, orpd_qty_unit, orpd_price, orpd_total_price, orpd_orpo_id, orpd_repo_id
`

type AddOrderDetailParams struct {
	OrpdQtyUnit    int32    `json:"orpd_qty_unit"`
	OrpdPrice      float64  `json:"orpd_price"`
	OrpdTotalPrice *float64 `json:"orpd_total_price"`
	OrpdOrpoID     *int32   `json:"orpd_orpo_id"`
	OrpdRepoID     *int32   `json:"orpd_repo_id"`
}

func (q *Queries) AddOrderDetail(ctx context.Context, arg AddOrderDetailParams) (*OrderRentPropertiesDetail, error) {
	row := q.db.QueryRow(ctx, addOrderDetail,
		arg.OrpdQtyUnit,
		arg.OrpdPrice,
		arg.OrpdTotalPrice,
		arg.OrpdOrpoID,
		arg.OrpdRepoID,
	)
	var i OrderRentPropertiesDetail
	err := row.Scan(
		&i.OrpdID,
		&i.OrpdQtyUnit,
		&i.OrpdPrice,
		&i.OrpdTotalPrice,
		&i.OrpdOrpoID,
		&i.OrpdRepoID,
	)
	return &i, err
}

const getAllItemsForOrder = `-- name: GetAllItemsForOrder :many
SELECT ord.orpd_id, ord.orpd_qty_unit, ord.orpd_price, ord.orpd_total_price, rp.repo_name
FROM order_rent_properties_detail ord
JOIN rent_properties rp ON ord.orpd_repo_id = rp.repo_id
WHERE ord.orpd_orpo_id = $1
`

type GetAllItemsForOrderRow struct {
	OrpdID         int32    `json:"orpd_id"`
	OrpdQtyUnit    int32    `json:"orpd_qty_unit"`
	OrpdPrice      float64  `json:"orpd_price"`
	OrpdTotalPrice *float64 `json:"orpd_total_price"`
	RepoName       string   `json:"repo_name"`
}

func (q *Queries) GetAllItemsForOrder(ctx context.Context, orpdOrpoID *int32) ([]*GetAllItemsForOrderRow, error) {
	rows, err := q.db.Query(ctx, getAllItemsForOrder, orpdOrpoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetAllItemsForOrderRow
	for rows.Next() {
		var i GetAllItemsForOrderRow
		if err := rows.Scan(
			&i.OrpdID,
			&i.OrpdQtyUnit,
			&i.OrpdPrice,
			&i.OrpdTotalPrice,
			&i.RepoName,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeItemFromOrder = `-- name: RemoveItemFromOrder :exec
DELETE FROM order_rent_properties_detail
WHERE orpd_id = $1
`

func (q *Queries) RemoveItemFromOrder(ctx context.Context, orpdID int32) error {
	_, err := q.db.Exec(ctx, removeItemFromOrder, orpdID)
	return err
}

const updateOrderItem = `-- name: UpdateOrderItem :exec
UPDATE order_rent_properties_detail
SET orpd_qty_unit = $1, orpd_price = $2, orpd_repo_id = $3
WHERE orpd_id = $4
`

type UpdateOrderItemParams struct {
	OrpdQtyUnit int32   `json:"orpd_qty_unit"`
	OrpdPrice   float64 `json:"orpd_price"`
	OrpdRepoID  *int32  `json:"orpd_repo_id"`
	OrpdID      int32   `json:"orpd_id"`
}

func (q *Queries) UpdateOrderItem(ctx context.Context, arg UpdateOrderItemParams) error {
	_, err := q.db.Exec(ctx, updateOrderItem,
		arg.OrpdQtyUnit,
		arg.OrpdPrice,
		arg.OrpdRepoID,
		arg.OrpdID,
	)
	return err
}

const updateOrderSubtotal = `-- name: UpdateOrderSubtotal :one
UPDATE order_rent_properties
SET orpo_subtotal = (
        SELECT COALESCE(SUM(orpd_total_price), 0) 
        FROM order_rent_properties_detail ord
        WHERE ord.orpd_orpo_id = order_rent_properties.orpo_id
    ),
    orpo_modified = CURRENT_TIMESTAMP
WHERE orpo_id = $1
RETURNING orpo_id, orpo_purchase_no, orpo_tax, orpo_subtotal, orpo_patrx_no, orpo_modified, orpo_user_id
`

func (q *Queries) UpdateOrderSubtotal(ctx context.Context, orpoID int32) (*OrderRentProperty, error) {
	row := q.db.QueryRow(ctx, updateOrderSubtotal, orpoID)
	var i OrderRentProperty
	err := row.Scan(
		&i.OrpoID,
		&i.OrpoPurchaseNo,
		&i.OrpoTax,
		&i.OrpoSubtotal,
		&i.OrpoPatrxNo,
		&i.OrpoModified,
		&i.OrpoUserID,
	)
	return &i, err
}

const updateOrderTotalAndTax = `-- name: UpdateOrderTotalAndTax :one
UPDATE order_rent_properties
SET orpo_subtotal = (
        SELECT COALESCE(SUM(orpd_total_price), 0) 
        FROM order_rent_properties_detail ord
        WHERE ord.orpd_orpo_id = order_rent_properties.orpo_id
    ),
    orpo_tax = (
        SELECT COALESCE(SUM(orpd_total_price) * 0.1, 0)
        FROM order_rent_properties_detail ord
        WHERE ord.orpd_orpo_id = order_rent_properties.orpo_id
    ),
    orpo_total_price = (
        SELECT COALESCE(SUM(orpd_total_price), 0) 
        FROM order_rent_properties_detail ord
        WHERE ord.orpd_orpo_id = order_rent_properties.orpo_id
    ) + (
        SELECT COALESCE(SUM(orpd_total_price) * 0.1, 0)
        FROM order_rent_properties_detail ord
        WHERE ord.orpd_orpo_id = order_rent_properties.orpo_id
    ),
    orpo_modified = CURRENT_TIMESTAMP
WHERE orpo_id = $1
RETURNING orpo_id, orpo_purchase_no, orpo_tax, orpo_subtotal, orpo_patrx_no, orpo_modified, orpo_user_id
`

func (q *Queries) UpdateOrderTotalAndTax(ctx context.Context, orpoID int32) (*OrderRentProperty, error) {
	row := q.db.QueryRow(ctx, updateOrderTotalAndTax, orpoID)
	var i OrderRentProperty
	err := row.Scan(
		&i.OrpoID,
		&i.OrpoPurchaseNo,
		&i.OrpoTax,
		&i.OrpoSubtotal,
		&i.OrpoPatrxNo,
		&i.OrpoModified,
		&i.OrpoUserID,
	)
	return &i, err
}
