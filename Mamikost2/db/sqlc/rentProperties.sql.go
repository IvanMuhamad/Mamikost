// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: rentProperties.sql

package db

import (
	"context"
)

const createRentProperty = `-- name: CreateRentProperty :one
INSERT INTO rent_properties (repo_name, repo_desc, repo_price, repo_cate_id)
VALUES ($1, $2, $3, $4)
RETURNING repo_id
`

type CreateRentPropertyParams struct {
	RepoName   string  `json:"repo_name"`
	RepoDesc   *string `json:"repo_desc"`
	RepoPrice  float64 `json:"repo_price"`
	RepoCateID *int32  `json:"repo_cate_id"`
}

func (q *Queries) CreateRentProperty(ctx context.Context, arg CreateRentPropertyParams) (int32, error) {
	row := q.db.QueryRow(ctx, createRentProperty,
		arg.RepoName,
		arg.RepoDesc,
		arg.RepoPrice,
		arg.RepoCateID,
	)
	var repo_id int32
	err := row.Scan(&repo_id)
	return repo_id, err
}

const deleteRentProperty = `-- name: DeleteRentProperty :exec
DELETE FROM rent_properties
WHERE repo_id = $1
`

func (q *Queries) DeleteRentProperty(ctx context.Context, repoID int32) error {
	_, err := q.db.Exec(ctx, deleteRentProperty, repoID)
	return err
}

const getAllRentProperties = `-- name: GetAllRentProperties :many
SELECT repo_id, repo_name, repo_desc, repo_price, repo_modified, repo_cate_id 
FROM rent_properties
`

func (q *Queries) GetAllRentProperties(ctx context.Context) ([]*RentProperty, error) {
	rows, err := q.db.Query(ctx, getAllRentProperties)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*RentProperty
	for rows.Next() {
		var i RentProperty
		if err := rows.Scan(
			&i.RepoID,
			&i.RepoName,
			&i.RepoDesc,
			&i.RepoPrice,
			&i.RepoModified,
			&i.RepoCateID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRentPropertyByID = `-- name: GetRentPropertyByID :one
SELECT repo_id, repo_name, repo_desc, repo_price, repo_modified, repo_cate_id 
FROM rent_properties 
WHERE repo_id = $1
`

func (q *Queries) GetRentPropertyByID(ctx context.Context, repoID int32) (*RentProperty, error) {
	row := q.db.QueryRow(ctx, getRentPropertyByID, repoID)
	var i RentProperty
	err := row.Scan(
		&i.RepoID,
		&i.RepoName,
		&i.RepoDesc,
		&i.RepoPrice,
		&i.RepoModified,
		&i.RepoCateID,
	)
	return &i, err
}

const updateRentProperty = `-- name: UpdateRentProperty :exec
UPDATE rent_properties
SET repo_name = $1, repo_desc = $2, repo_price = $3, repo_cate_id = $4, repo_modified = CURRENT_TIMESTAMP
WHERE repo_id = $5
`

type UpdateRentPropertyParams struct {
	RepoName   string  `json:"repo_name"`
	RepoDesc   *string `json:"repo_desc"`
	RepoPrice  float64 `json:"repo_price"`
	RepoCateID *int32  `json:"repo_cate_id"`
	RepoID     int32   `json:"repo_id"`
}

func (q *Queries) UpdateRentProperty(ctx context.Context, arg UpdateRentPropertyParams) error {
	_, err := q.db.Exec(ctx, updateRentProperty,
		arg.RepoName,
		arg.RepoDesc,
		arg.RepoPrice,
		arg.RepoCateID,
		arg.RepoID,
	)
	return err
}
