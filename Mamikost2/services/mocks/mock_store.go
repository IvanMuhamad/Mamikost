// Code generated by MockGen. DO NOT EDIT.
// Source: Mamikost2/services (interfaces: Store)

// Package mocks is a generated GoMock package.
package mocks

import (
	db "Mamikost2/db/sqlc"
	models "Mamikost2/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddItemOrder mocks base method.
func (m *MockStore) AddItemOrder(arg0 context.Context, arg1 db.AddItemOrderParams) (*db.OrderRentPropertiesDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddItemOrder", arg0, arg1)
	ret0, _ := ret[0].(*db.OrderRentPropertiesDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddItemOrder indicates an expected call of AddItemOrder.
func (mr *MockStoreMockRecorder) AddItemOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItemOrder", reflect.TypeOf((*MockStore)(nil).AddItemOrder), arg0, arg1)
}

// AddOrderDetail mocks base method.
func (m *MockStore) AddOrderDetail(arg0 context.Context, arg1 db.AddOrderDetailParams) (*db.OrderRentPropertiesDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrderDetail", arg0, arg1)
	ret0, _ := ret[0].(*db.OrderRentPropertiesDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOrderDetail indicates an expected call of AddOrderDetail.
func (mr *MockStoreMockRecorder) AddOrderDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrderDetail", reflect.TypeOf((*MockStore)(nil).AddOrderDetail), arg0, arg1)
}

// CreateCart mocks base method.
func (m *MockStore) CreateCart(arg0 context.Context, arg1 db.CreateCartParams) (*db.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCart", arg0, arg1)
	ret0, _ := ret[0].(*db.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCart indicates an expected call of CreateCart.
func (mr *MockStoreMockRecorder) CreateCart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCart", reflect.TypeOf((*MockStore)(nil).CreateCart), arg0, arg1)
}

// CreateCategory mocks base method.
func (m *MockStore) CreateCategory(arg0 context.Context, arg1 string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockStoreMockRecorder) CreateCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockStore)(nil).CreateCategory), arg0, arg1)
}

// CreateOrder mocks base method.
func (m *MockStore) CreateOrder(arg0 context.Context, arg1 db.CreateOrderParams) (*db.OrderRentProperty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(*db.OrderRentProperty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockStoreMockRecorder) CreateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockStore)(nil).CreateOrder), arg0, arg1)
}

// CreateOrderTx mocks base method.
func (m *MockStore) CreateOrderTx(arg0 context.Context, arg1 db.CreateOrderParams) (*db.OrderRentProperty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderTx", arg0, arg1)
	ret0, _ := ret[0].(*db.OrderRentProperty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderTx indicates an expected call of CreateOrderTx.
func (mr *MockStoreMockRecorder) CreateOrderTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderTx", reflect.TypeOf((*MockStore)(nil).CreateOrderTx), arg0, arg1)
}

// CreateRentProperty mocks base method.
func (m *MockStore) CreateRentProperty(arg0 context.Context, arg1 db.CreateRentPropertyParams) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRentProperty", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRentProperty indicates an expected call of CreateRentProperty.
func (mr *MockStoreMockRecorder) CreateRentProperty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRentProperty", reflect.TypeOf((*MockStore)(nil).CreateRentProperty), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteAllImagesForProperty mocks base method.
func (m *MockStore) DeleteAllImagesForProperty(arg0 context.Context, arg1 *int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllImagesForProperty", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllImagesForProperty indicates an expected call of DeleteAllImagesForProperty.
func (mr *MockStoreMockRecorder) DeleteAllImagesForProperty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllImagesForProperty", reflect.TypeOf((*MockStore)(nil).DeleteAllImagesForProperty), arg0, arg1)
}

// DeleteCart mocks base method.
func (m *MockStore) DeleteCart(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCart", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCart indicates an expected call of DeleteCart.
func (mr *MockStoreMockRecorder) DeleteCart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCart", reflect.TypeOf((*MockStore)(nil).DeleteCart), arg0, arg1)
}

// DeleteCategory mocks base method.
func (m *MockStore) DeleteCategory(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockStoreMockRecorder) DeleteCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockStore)(nil).DeleteCategory), arg0, arg1)
}

// DeleteImageByID mocks base method.
func (m *MockStore) DeleteImageByID(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImageByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImageByID indicates an expected call of DeleteImageByID.
func (mr *MockStoreMockRecorder) DeleteImageByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImageByID", reflect.TypeOf((*MockStore)(nil).DeleteImageByID), arg0, arg1)
}

// DeleteOrder mocks base method.
func (m *MockStore) DeleteOrder(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockStoreMockRecorder) DeleteOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockStore)(nil).DeleteOrder), arg0, arg1)
}

// DeleteRentProperty mocks base method.
func (m *MockStore) DeleteRentProperty(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRentProperty", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRentProperty indicates an expected call of DeleteRentProperty.
func (mr *MockStoreMockRecorder) DeleteRentProperty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRentProperty", reflect.TypeOf((*MockStore)(nil).DeleteRentProperty), arg0, arg1)
}

// DeleteToken mocks base method.
func (m *MockStore) DeleteToken(arg0 context.Context, arg1 *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteToken indicates an expected call of DeleteToken.
func (mr *MockStoreMockRecorder) DeleteToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteToken", reflect.TypeOf((*MockStore)(nil).DeleteToken), arg0, arg1)
}

// FindAllOrders mocks base method.
func (m *MockStore) FindAllOrders(arg0 context.Context) ([]*db.OrderRentProperty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllOrders", arg0)
	ret0, _ := ret[0].([]*db.OrderRentProperty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllOrders indicates an expected call of FindAllOrders.
func (mr *MockStoreMockRecorder) FindAllOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllOrders", reflect.TypeOf((*MockStore)(nil).FindAllOrders), arg0)
}

// FindCartByUserandRentProperty mocks base method.
func (m *MockStore) FindCartByUserandRentProperty(arg0 context.Context, arg1 db.FindCartByUserandRentPropertyParams) (*db.FindCartByUserandRentPropertyRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCartByUserandRentProperty", arg0, arg1)
	ret0, _ := ret[0].(*db.FindCartByUserandRentPropertyRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCartByUserandRentProperty indicates an expected call of FindCartByUserandRentProperty.
func (mr *MockStoreMockRecorder) FindCartByUserandRentProperty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCartByUserandRentProperty", reflect.TypeOf((*MockStore)(nil).FindCartByUserandRentProperty), arg0, arg1)
}

// FindOrderByID mocks base method.
func (m *MockStore) FindOrderByID(arg0 context.Context, arg1 int32) (*db.OrderRentProperty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrderByID", arg0, arg1)
	ret0, _ := ret[0].(*db.OrderRentProperty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrderByID indicates an expected call of FindOrderByID.
func (mr *MockStoreMockRecorder) FindOrderByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrderByID", reflect.TypeOf((*MockStore)(nil).FindOrderByID), arg0, arg1)
}

// FindUserByPhone mocks base method.
func (m *MockStore) FindUserByPhone(arg0 context.Context, arg1 string) (*db.FindUserByPhoneRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByPhone", arg0, arg1)
	ret0, _ := ret[0].(*db.FindUserByPhoneRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByPhone indicates an expected call of FindUserByPhone.
func (mr *MockStoreMockRecorder) FindUserByPhone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByPhone", reflect.TypeOf((*MockStore)(nil).FindUserByPhone), arg0, arg1)
}

// FindUserByUserPassword mocks base method.
func (m *MockStore) FindUserByUserPassword(arg0 context.Context, arg1 db.FindUserByUserPasswordParams) (*db.FindUserByUserPasswordRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByUserPassword", arg0, arg1)
	ret0, _ := ret[0].(*db.FindUserByUserPasswordRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByUserPassword indicates an expected call of FindUserByUserPassword.
func (mr *MockStoreMockRecorder) FindUserByUserPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByUserPassword", reflect.TypeOf((*MockStore)(nil).FindUserByUserPassword), arg0, arg1)
}

// FindUserByUsername mocks base method.
func (m *MockStore) FindUserByUsername(arg0 context.Context, arg1 string) (*db.FindUserByUsernameRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(*db.FindUserByUsernameRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByUsername indicates an expected call of FindUserByUsername.
func (mr *MockStoreMockRecorder) FindUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByUsername", reflect.TypeOf((*MockStore)(nil).FindUserByUsername), arg0, arg1)
}

// GetAllCategories mocks base method.
func (m *MockStore) GetAllCategories(arg0 context.Context) ([]*db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCategories", arg0)
	ret0, _ := ret[0].([]*db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCategories indicates an expected call of GetAllCategories.
func (mr *MockStoreMockRecorder) GetAllCategories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCategories", reflect.TypeOf((*MockStore)(nil).GetAllCategories), arg0)
}

// GetAllImages mocks base method.
func (m *MockStore) GetAllImages(arg0 context.Context) ([]*db.RentPropertiesImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllImages", arg0)
	ret0, _ := ret[0].([]*db.RentPropertiesImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllImages indicates an expected call of GetAllImages.
func (mr *MockStoreMockRecorder) GetAllImages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllImages", reflect.TypeOf((*MockStore)(nil).GetAllImages), arg0)
}

// GetAllItemsForOrder mocks base method.
func (m *MockStore) GetAllItemsForOrder(arg0 context.Context, arg1 *int32) ([]*db.GetAllItemsForOrderRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllItemsForOrder", arg0, arg1)
	ret0, _ := ret[0].([]*db.GetAllItemsForOrderRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllItemsForOrder indicates an expected call of GetAllItemsForOrder.
func (mr *MockStoreMockRecorder) GetAllItemsForOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllItemsForOrder", reflect.TypeOf((*MockStore)(nil).GetAllItemsForOrder), arg0, arg1)
}

// GetAllRentProperties mocks base method.
func (m *MockStore) GetAllRentProperties(arg0 context.Context) ([]*db.RentProperty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRentProperties", arg0)
	ret0, _ := ret[0].([]*db.RentProperty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRentProperties indicates an expected call of GetAllRentProperties.
func (mr *MockStoreMockRecorder) GetAllRentProperties(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRentProperties", reflect.TypeOf((*MockStore)(nil).GetAllRentProperties), arg0)
}

// GetCartByUserID mocks base method.
func (m *MockStore) GetCartByUserID(arg0 context.Context, arg1 *int32) ([]*db.GetCartByUserIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartByUserID", arg0, arg1)
	ret0, _ := ret[0].([]*db.GetCartByUserIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartByUserID indicates an expected call of GetCartByUserID.
func (mr *MockStoreMockRecorder) GetCartByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartByUserID", reflect.TypeOf((*MockStore)(nil).GetCartByUserID), arg0, arg1)
}

// GetCategoryByID mocks base method.
func (m *MockStore) GetCategoryByID(arg0 context.Context, arg1 int32) (*db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryByID", arg0, arg1)
	ret0, _ := ret[0].(*db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByID indicates an expected call of GetCategoryByID.
func (mr *MockStoreMockRecorder) GetCategoryByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByID", reflect.TypeOf((*MockStore)(nil).GetCategoryByID), arg0, arg1)
}

// GetImageByID mocks base method.
func (m *MockStore) GetImageByID(arg0 context.Context, arg1 int32) (*db.RentPropertiesImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageByID", arg0, arg1)
	ret0, _ := ret[0].(*db.RentPropertiesImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageByID indicates an expected call of GetImageByID.
func (mr *MockStoreMockRecorder) GetImageByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageByID", reflect.TypeOf((*MockStore)(nil).GetImageByID), arg0, arg1)
}

// GetRentPropertyByID mocks base method.
func (m *MockStore) GetRentPropertyByID(arg0 context.Context, arg1 int32) (*db.RentProperty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRentPropertyByID", arg0, arg1)
	ret0, _ := ret[0].(*db.RentProperty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRentPropertyByID indicates an expected call of GetRentPropertyByID.
func (mr *MockStoreMockRecorder) GetRentPropertyByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRentPropertyByID", reflect.TypeOf((*MockStore)(nil).GetRentPropertyByID), arg0, arg1)
}

// RemoveItemFromOrder mocks base method.
func (m *MockStore) RemoveItemFromOrder(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveItemFromOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveItemFromOrder indicates an expected call of RemoveItemFromOrder.
func (mr *MockStoreMockRecorder) RemoveItemFromOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveItemFromOrder", reflect.TypeOf((*MockStore)(nil).RemoveItemFromOrder), arg0, arg1)
}

// Signin mocks base method.
func (m *MockStore) Signin(arg0 context.Context, arg1 models.CreateUserRequest) (*models.UserResponse, *models.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signin", arg0, arg1)
	ret0, _ := ret[0].(*models.UserResponse)
	ret1, _ := ret[1].(*models.Error)
	return ret0, ret1
}

// Signin indicates an expected call of Signin.
func (mr *MockStoreMockRecorder) Signin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signin", reflect.TypeOf((*MockStore)(nil).Signin), arg0, arg1)
}

// Signout mocks base method.
func (m *MockStore) Signout(arg0 context.Context, arg1 string) *models.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signout", arg0, arg1)
	ret0, _ := ret[0].(*models.Error)
	return ret0
}

// Signout indicates an expected call of Signout.
func (mr *MockStoreMockRecorder) Signout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signout", reflect.TypeOf((*MockStore)(nil).Signout), arg0, arg1)
}

// Signup mocks base method.
func (m *MockStore) Signup(arg0 context.Context, arg1 models.CreateUserRequest) (*models.UserResponse, *models.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", arg0, arg1)
	ret0, _ := ret[0].(*models.UserResponse)
	ret1, _ := ret[1].(*models.Error)
	return ret0, ret1
}

// Signup indicates an expected call of Signup.
func (mr *MockStoreMockRecorder) Signup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockStore)(nil).Signup), arg0, arg1)
}

// UpdateCart mocks base method.
func (m *MockStore) UpdateCart(arg0 context.Context, arg1 db.UpdateCartParams) (*db.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCart", arg0, arg1)
	ret0, _ := ret[0].(*db.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCart indicates an expected call of UpdateCart.
func (mr *MockStoreMockRecorder) UpdateCart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCart", reflect.TypeOf((*MockStore)(nil).UpdateCart), arg0, arg1)
}

// UpdateCartQty mocks base method.
func (m *MockStore) UpdateCartQty(arg0 context.Context, arg1 db.UpdateCartQtyParams) (*db.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCartQty", arg0, arg1)
	ret0, _ := ret[0].(*db.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCartQty indicates an expected call of UpdateCartQty.
func (mr *MockStoreMockRecorder) UpdateCartQty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCartQty", reflect.TypeOf((*MockStore)(nil).UpdateCartQty), arg0, arg1)
}

// UpdateCategory mocks base method.
func (m *MockStore) UpdateCategory(arg0 context.Context, arg1 db.UpdateCategoryParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockStoreMockRecorder) UpdateCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockStore)(nil).UpdateCategory), arg0, arg1)
}

// UpdateOrder mocks base method.
func (m *MockStore) UpdateOrder(arg0 context.Context, arg1 db.UpdateOrderParams) (*db.OrderRentProperty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", arg0, arg1)
	ret0, _ := ret[0].(*db.OrderRentProperty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockStoreMockRecorder) UpdateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockStore)(nil).UpdateOrder), arg0, arg1)
}

// UpdateOrderItem mocks base method.
func (m *MockStore) UpdateOrderItem(arg0 context.Context, arg1 db.UpdateOrderItemParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderItem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderItem indicates an expected call of UpdateOrderItem.
func (mr *MockStoreMockRecorder) UpdateOrderItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderItem", reflect.TypeOf((*MockStore)(nil).UpdateOrderItem), arg0, arg1)
}

// UpdateOrderPatrxNo mocks base method.
func (m *MockStore) UpdateOrderPatrxNo(arg0 context.Context, arg1 db.UpdateOrderPatrxNoParams) (*db.OrderRentProperty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderPatrxNo", arg0, arg1)
	ret0, _ := ret[0].(*db.OrderRentProperty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderPatrxNo indicates an expected call of UpdateOrderPatrxNo.
func (mr *MockStoreMockRecorder) UpdateOrderPatrxNo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderPatrxNo", reflect.TypeOf((*MockStore)(nil).UpdateOrderPatrxNo), arg0, arg1)
}

// UpdateOrderSubtotal mocks base method.
func (m *MockStore) UpdateOrderSubtotal(arg0 context.Context, arg1 int32) (*db.OrderRentProperty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderSubtotal", arg0, arg1)
	ret0, _ := ret[0].(*db.OrderRentProperty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderSubtotal indicates an expected call of UpdateOrderSubtotal.
func (mr *MockStoreMockRecorder) UpdateOrderSubtotal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderSubtotal", reflect.TypeOf((*MockStore)(nil).UpdateOrderSubtotal), arg0, arg1)
}

// UpdateOrderTotalAndTax mocks base method.
func (m *MockStore) UpdateOrderTotalAndTax(arg0 context.Context, arg1 int32) (*db.OrderRentProperty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderTotalAndTax", arg0, arg1)
	ret0, _ := ret[0].(*db.OrderRentProperty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderTotalAndTax indicates an expected call of UpdateOrderTotalAndTax.
func (mr *MockStoreMockRecorder) UpdateOrderTotalAndTax(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderTotalAndTax", reflect.TypeOf((*MockStore)(nil).UpdateOrderTotalAndTax), arg0, arg1)
}

// UpdateRentProperty mocks base method.
func (m *MockStore) UpdateRentProperty(arg0 context.Context, arg1 db.UpdateRentPropertyParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRentProperty", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRentProperty indicates an expected call of UpdateRentProperty.
func (mr *MockStoreMockRecorder) UpdateRentProperty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRentProperty", reflect.TypeOf((*MockStore)(nil).UpdateRentProperty), arg0, arg1)
}

// UpdateToken mocks base method.
func (m *MockStore) UpdateToken(arg0 context.Context, arg1 db.UpdateTokenParams) (*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateToken", arg0, arg1)
	ret0, _ := ret[0].(*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateToken indicates an expected call of UpdateToken.
func (mr *MockStoreMockRecorder) UpdateToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateToken", reflect.TypeOf((*MockStore)(nil).UpdateToken), arg0, arg1)
}

// UpdateUserName mocks base method.
func (m *MockStore) UpdateUserName(arg0 context.Context, arg1 db.UpdateUserNameParams) (*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserName", arg0, arg1)
	ret0, _ := ret[0].(*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserName indicates an expected call of UpdateUserName.
func (mr *MockStoreMockRecorder) UpdateUserName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserName", reflect.TypeOf((*MockStore)(nil).UpdateUserName), arg0, arg1)
}

// UpdateUserPhone mocks base method.
func (m *MockStore) UpdateUserPhone(arg0 context.Context, arg1 db.UpdateUserPhoneParams) (*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPhone", arg0, arg1)
	ret0, _ := ret[0].(*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPhone indicates an expected call of UpdateUserPhone.
func (mr *MockStoreMockRecorder) UpdateUserPhone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPhone", reflect.TypeOf((*MockStore)(nil).UpdateUserPhone), arg0, arg1)
}

// UploadImage mocks base method.
func (m *MockStore) UploadImage(arg0 context.Context, arg1 db.UploadImageParams) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadImage", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadImage indicates an expected call of UploadImage.
func (mr *MockStoreMockRecorder) UploadImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImage", reflect.TypeOf((*MockStore)(nil).UploadImage), arg0, arg1)
}
